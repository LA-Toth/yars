.PHONY: all doc run make clean

CXX_FLAGS=-Wall -Werror -O2 -g0 -fomit-frame-pointer -funroll-loops -DSND_BUFSIZE=1024 -I. -Icommon  -Wstack-protector  -fno-stack-protector
C_FLAGS=-Wall -Werror -O2 -g0 -fomit-frame-pointer -funroll-loops -DSND_BUFSIZE=1024 -I. -Icommon  -Wstack-protector -fno-stack-protector
LDFLAGS=-lpthread
BINARY=srv
BINDIR=../bin/
all: $(BINARY)
	@mv $(BINARY) $(BINDIR)/yars-$(BINARY)

doc:
	@doxygen ../conf/doxygen.conf 2>/dev/null >&2

run: all	
	@$(BINDIR)$(BINARY) -f ../conf/server.conf

make:
	@mcedit Makefile

#$(BINARY): $(OBJS)
#	g++ $(CXX_FLAGS) -o $(BINARY) $(OBJS)



CXX_SOURCES  = 
CXX_SOURCES += common/checksums.cpp
CXX_SOURCES += common/confparser.cpp
CXX_SOURCES += common/helpers.cpp
CXX_SOURCES += common/rwlock.cpp
CXX_SOURCES += common/rs/rsheader.cpp
CXX_SOURCES += common/rs/rsparser.cpp
CXX_SOURCES += common/rs/rsserverrequest.cpp
CXX_SOURCES += common/rs/rsserverresponse.cpp
CXX_SOURCES += common/types/checksuminfo.cpp
CXX_SOURCES += common/types/imageinfo.cpp
CXX_SOURCES += common/types/semaphore.cpp
CXX_SOURCES += server/config.cpp
CXX_SOURCES += server/config_thread.cpp
CXX_SOURCES += server/srv.cpp

C_SOURCES =

C_SOURCES += common/md5.c

OBJS = $(C_SOURCES:%.c=%.o) $(CXX_SOURCES:%.cpp=%.o)

clean:
	@echo Removing object files
	@rm $(OBJS) $(BINARY) *~ .deps/*.d 2>/dev/null || true


DEPS = $(OBJS:%.o=.deps/%.d)
##############################################################################
#
# Build commands
#

# If we are verbose, we will show commands prefixed by $(Q) (which acts as
# @ in the non-verbose mode), and we will show the "real" cmds instead of
# their quiet versions (which are used in the non-verbose mode).
# Inspired by the Linux kernel build system.
ifdef VERBOSE
        Q =
        quiet =
else
        Q = @
        quiet = quiet_
endif

# Show the command (quiet or non-quiet version based on the assignment
# just above) and then execute it.
cmd = @$(if $($(quiet)cmd_$(1)),echo $($(quiet)cmd_$(1)) &&) $(cmd_$(1))


# The build commands themselves. Note that if you omit the quiet version,
# nothing will be shown in the non-verbose mode.

quiet_cmd_compile_link = '===> Compiling and Linking $@'
      cmd_compile_link = $(CXX) $< -o $@

quiet_cmd_binary_link = '===> Linking $@'
      cmd_binary_link = $(CXX) $(LDFLAGS) $(TTDLDFLAGS) $(OBJS) $(LIBS) -o $@

COMPILE_PARAMS=$(CXX_FLAGS) -MD -c $< -o $@

quiet_cmd_c_compile = '===> Compiling $<'
      cmd_c_compile = $(CC) $(COMPILE_PARAMS)

quiet_cmd_cxx_compile = '===> Compiling $<'
      cmd_cxx_compile = $(CXX) $(COMPILE_PARAMS)


### Internal build rules

# This makes sure the .deps dir is always around.
DEPS_MAGIC := $(shell mkdir .deps > /dev/null 2>&1 || :)

# Introduce the dependencies
-include $(DEPS)


%.o: %.c
	$(call cmd,c_compile)
	@mkdir -p $(shell dirname $(<:%.cpp=.deps/%.d)) 2>/dev/null
	@mv $(shell basename $(<:%.c=%.d)) $(<:%.c=.deps/%.d) || true

%.o: %.cpp
	$(call cmd,cxx_compile)
	@mkdir -p $(shell dirname $(<:%.cpp=.deps/%.d)) 2>/dev/null
	@mv $(shell basename $(<:%.cpp=%.d)) $(<:%.cpp=.deps/%.d) || true

# Silence stale header dependencies
%.h:
	@true


$(BINARY): $(OBJS)
	$(call cmd,binary_link)
